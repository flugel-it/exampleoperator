/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flugel-it/exampleoperator/pkg/apis/exampleoperator/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImmortalContainerLister helps list ImmortalContainers.
type ImmortalContainerLister interface {
	// List lists all ImmortalContainers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ImmortalContainer, err error)
	// ImmortalContainers returns an object that can list and get ImmortalContainers.
	ImmortalContainers(namespace string) ImmortalContainerNamespaceLister
	ImmortalContainerListerExpansion
}

// immortalContainerLister implements the ImmortalContainerLister interface.
type immortalContainerLister struct {
	indexer cache.Indexer
}

// NewImmortalContainerLister returns a new ImmortalContainerLister.
func NewImmortalContainerLister(indexer cache.Indexer) ImmortalContainerLister {
	return &immortalContainerLister{indexer: indexer}
}

// List lists all ImmortalContainers in the indexer.
func (s *immortalContainerLister) List(selector labels.Selector) (ret []*v1alpha1.ImmortalContainer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImmortalContainer))
	})
	return ret, err
}

// ImmortalContainers returns an object that can list and get ImmortalContainers.
func (s *immortalContainerLister) ImmortalContainers(namespace string) ImmortalContainerNamespaceLister {
	return immortalContainerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImmortalContainerNamespaceLister helps list and get ImmortalContainers.
type ImmortalContainerNamespaceLister interface {
	// List lists all ImmortalContainers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ImmortalContainer, err error)
	// Get retrieves the ImmortalContainer from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ImmortalContainer, error)
	ImmortalContainerNamespaceListerExpansion
}

// immortalContainerNamespaceLister implements the ImmortalContainerNamespaceLister
// interface.
type immortalContainerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImmortalContainers in the indexer for a given namespace.
func (s immortalContainerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ImmortalContainer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImmortalContainer))
	})
	return ret, err
}

// Get retrieves the ImmortalContainer from the indexer for a given namespace and name.
func (s immortalContainerNamespaceLister) Get(name string) (*v1alpha1.ImmortalContainer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("immortalcontainer"), name)
	}
	return obj.(*v1alpha1.ImmortalContainer), nil
}
